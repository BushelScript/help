(self.webpackChunk=self.webpackChunk||[]).push([[982],{3905:(e,t,n)=>{"use strict";n.d(t,{Zo:()=>m,kt:()=>u});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=a.createContext({}),p=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(d.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},k=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,d=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),k=p(n),u=r,c=k["".concat(d,".").concat(u)]||k[u]||s[u]||i;return n?a.createElement(c,l(l({ref:t},m),{},{components:n})):a.createElement(c,l({ref:t},m))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=k;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}k.displayName="MDXCreateElement"},2409:(e,t,n)=>{"use strict";n.r(t),n.d(t,{frontMatter:()=>o,metadata:()=>d,toc:()=>p,default:()=>s});var a=n(2122),r=n(9756),i=(n(7294),n(3905)),l=["components"],o={title:"1-2: Basic Syntax",sidebar_label:"Part 2: Basic Syntax"},d={unversionedId:"ref/basic-syntax",id:"ref/basic-syntax",isDocsHomePage:!1,title:"1-2: Basic Syntax",description:"BushelScript, being a programming language, has syntax which must be adhered to.",source:"@site/docs/ref/basic-syntax.md",sourceDirName:"ref",slug:"/ref/basic-syntax",permalink:"/help/docs/ref/basic-syntax",version:"current",lastUpdatedBy:"Ian Gregory",lastUpdatedAt:1623479137,formattedLastUpdatedAt:"6/12/2021",sidebar_label:"Part 2: Basic Syntax",frontMatter:{title:"1-2: Basic Syntax",sidebar_label:"Part 2: Basic Syntax"},sidebar:"ref",previous:{title:"1-1: User Interaction",permalink:"/help/docs/ref/user-interaction"},next:{title:"1-3: Data Flow",permalink:"/help/docs/ref/data-flow"}},p=[{value:"Comments",id:"comments",children:[{value:"Line comments",id:"line-comments",children:[]},{value:"Block comments",id:"block-comments",children:[]}]},{value:"Values",id:"values",children:[{value:"Numbers",id:"numbers",children:[]},{value:"string",id:"string",children:[]},{value:"boolean, truth and falsity",id:"boolean-truth-and-falsity",children:[]},{value:"null, the absence of a value",id:"null-the-absence-of-a-value",children:[]}]},{value:"Commands",id:"commands",children:[{value:"Parameters",id:"parameters",children:[]},{value:"Result",id:"result",children:[]},{value:"Side-effects",id:"side-effects",children:[]},{value:"Command invocations",id:"command-invocations",children:[]},{value:"Precise terminology",id:"precise-terminology",children:[]}]},{value:"Operators",id:"operators",children:[{value:"Unary operators",id:"unary-operators",children:[]},{value:"Binary operators",id:"binary-operators",children:[]}]}],m={toc:p};function s(e){var t=e.components,n=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"BushelScript, being a programming language, has syntax which must be adhered to."),(0,i.kt)("p",null,"See also: ",(0,i.kt)("a",{parentName:"p",href:"../tutorial/basic-syntax"},"Quick Tutorial"),"."),(0,i.kt)("h2",{id:"comments"},"Comments"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Comments")," are pieces of text embedded in a program that are intended only to aid human readers. They have no formal semantic effect on the program; adding or removing comments does not change what a program does."),(0,i.kt)("h3",{id:"line-comments"},(0,i.kt)("a",{parentName:"h3",href:"grammar#sequence"},"Line comments")),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Line comments")," begin with ",(0,i.kt)("inlineCode",{parentName:"p"},"--")," and continue to the end of their line."),(0,i.kt)("h3",{id:"block-comments"},(0,i.kt)("a",{parentName:"h3",href:"grammar#blank"},"Block comments")),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Block comments")," begin with ",(0,i.kt)("inlineCode",{parentName:"p"},"--(")," and continue through to new lines, until either ",(0,i.kt)("inlineCode",{parentName:"p"},")--")," or the end of the program is reached."),(0,i.kt)("h2",{id:"values"},"Values"),(0,i.kt)("h3",{id:"numbers"},(0,i.kt)("a",{parentName:"h3",href:"grammar#literal"},"Numbers")),(0,i.kt)("h4",{id:"integers"},(0,i.kt)("a",{parentName:"h4",href:"grammar#literal"},(0,i.kt)("inlineCode",{parentName:"a"},"integer"),"s")),(0,i.kt)("p",null,"Positive and negative whole numbers, no fractions. Any numeric literal in the appropriate range and without a decimal point produces an ",(0,i.kt)("inlineCode",{parentName:"p"},"integer"),". ",(0,i.kt)("inlineCode",{parentName:"p"},"integer"),"s store signed 64-bit values, which means -2\u2076\xb3 \u2264 \ud835\udc65 < 2\u2076\xb3 for all ",(0,i.kt)("inlineCode",{parentName:"p"},"integer"),"s \ud835\udc65."),(0,i.kt)("h4",{id:"reals"},(0,i.kt)("a",{parentName:"h4",href:"grammar#literal"},(0,i.kt)("inlineCode",{parentName:"a"},"real"),"s")),(0,i.kt)("p",null,"Positive and negative numbers with fractions allowed. A numeric literal with a ",(0,i.kt)("inlineCode",{parentName:"p"},".")," decimal point produces a ",(0,i.kt)("inlineCode",{parentName:"p"},"real"),"."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"real"),"s use double-precision ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Floating-point_arithmetic"},"floating-point")," format. This provides a huge range of representable values, but can cause imprecision in base-10 calculations: ",(0,i.kt)("inlineCode",{parentName:"p"},"real"),"s are stored as \ud835\udc60 \xd7 2\u207f, where \ud835\udc60 and \ud835\udc5b are integers, but not all decimal numbers can be represented exactly in this format."),(0,i.kt)("h3",{id:"string"},(0,i.kt)("a",{parentName:"h3",href:"grammar#literal"},(0,i.kt)("inlineCode",{parentName:"a"},"string"))),(0,i.kt)("p",null,"A ",(0,i.kt)("inlineCode",{parentName:"p"},"string")," is a sequence of Unicode characters. If it's text, it goes in a ",(0,i.kt)("inlineCode",{parentName:"p"},"string"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'"abc"\n"this is a string value"\n"\ud83d\ude00\ud83d\ude03\ud83d\ude04" -- length 3 (grapheme clusters, not UTF-16 units)\n')),(0,i.kt)("h3",{id:"boolean-truth-and-falsity"},(0,i.kt)("a",{parentName:"h3",href:"grammar#literal"},(0,i.kt)("inlineCode",{parentName:"a"},"boolean"),", truth and falsity")),(0,i.kt)("p",null,"A ",(0,i.kt)("inlineCode",{parentName:"p"},"boolean")," represents the answer to a yes-or-no question. It can be reacted to by ",(0,i.kt)("a",{parentName:"p",href:"control-flow"},"control flow constructs")," or factored into ",(0,i.kt)("a",{parentName:"p",href:"#binary-operators"},"logical operations"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"true\nfalse\ntrue and false --\x3e false\nfalse or true --\x3e true\n")),(0,i.kt)("h3",{id:"null-the-absence-of-a-value"},(0,i.kt)("a",{parentName:"h3",href:"grammar#literal"},(0,i.kt)("inlineCode",{parentName:"a"},"null"),", the absence of a value")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"null")," indicates the absence of a meaningful value. Its effective semantics depend on the context of its use."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"null")," is the sole value of ",(0,i.kt)("a",{parentName:"p",href:"terms#raw-form"},"raw form")," ",(0,i.kt)("a",{parentName:"p",href:"terms#term-types"},"type")," ",(0,i.kt)("inlineCode",{parentName:"p"},"\xabtype ae4:msng\xbb"),", which is called ",(0,i.kt)("inlineCode",{parentName:"p"},"missing value")," in AppleScript. It is ",(0,i.kt)("a",{parentName:"p",href:"resources#remote-invocations"},"encoded")," as this type object when sent in an AppleEvent."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"null\nnull as boolean --\x3e false\n")),(0,i.kt)("p",null,"Parameters without corresponding arguments in a ",(0,i.kt)("a",{parentName:"p",href:"functions"},"function")," ",(0,i.kt)("a",{parentName:"p",href:"#command-invocations"},"invocation")," are set to ",(0,i.kt)("inlineCode",{parentName:"p"},"null")," in the function body:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'on build greeting: to name\n  -- \'name\' is null if the \'to\' parameter is omitted\n  alert name\n  -- null as a boolean is false\n  "Hello" & (if name then (", " & name) else "") & "!"\nend\n\nbuild greeting --\x3e "Hello!"\nalert that\n\nbuild greeting to "Billy" --\x3e "Hello, Billy!"\nalert that\n')),(0,i.kt)("h2",{id:"commands"},"Commands"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Commands")," are units of operation. They take and produce data, and may have additional effects."),(0,i.kt)("h3",{id:"parameters"},"Parameters"),(0,i.kt)("p",null,"Inputs to a command are called its ",(0,i.kt)("em",{parentName:"p"},"parameters"),". The caller provides their values."),(0,i.kt)("h3",{id:"result"},"Result"),(0,i.kt)("p",null,"The output of a command is called its ",(0,i.kt)("em",{parentName:"p"},"result"),". It is available to the caller after it has received control back from a call."),(0,i.kt)("h3",{id:"side-effects"},"Side-effects"),(0,i.kt)("p",null,"Commands often have ",(0,i.kt)("em",{parentName:"p"},"side-effects"),"; that is, they modify outside state in addition to producing a result. Side-effects are necessary for a program to really do anything, but they can also make code harder to debug. Commands without side-effects are analogous to mathematical functions."),(0,i.kt)("h3",{id:"command-invocations"},(0,i.kt)("a",{parentName:"h3",href:"grammar#invocation"},"Command invocations")),(0,i.kt)("p",null,"A command is ",(0,i.kt)("em",{parentName:"p"},"invoked")," by naming it. This produces a ",(0,i.kt)("em",{parentName:"p"},"command invocation")," expression, which passes ",(0,i.kt)("em",{parentName:"p"},"arguments")," to the command's parameters and evaluates to its result."),(0,i.kt)("h3",{id:"precise-terminology"},"Precise terminology"),(0,i.kt)("p",null,"To be as clear and precise as possible, here is a table summarizing what each confusingly similar command-related term precisely means:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Term"),(0,i.kt)("th",{parentName:"tr",align:null},"Definition"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"call"),(0,i.kt)("td",{parentName:"tr",align:null},"A single evaluation of a command with a certain set of inputs. Often but not strictly produced by invocations.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"invocation"),(0,i.kt)("td",{parentName:"tr",align:null},"An expression that generates a command call, using a certain set of arguments, and evaluates to its result.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"parameter"),(0,i.kt)("td",{parentName:"tr",align:null},"A term with which argument values can be associated in an invocation or call. e.g., ",(0,i.kt)("inlineCode",{parentName:"td"},"new")," in ",(0,i.kt)("inlineCode",{parentName:"td"},"make new window"),".")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"argument"),(0,i.kt)("td",{parentName:"tr",align:null},"An input value from the point of view of an invocation. Is ephemeral and constant on a per-invocation basis.")))),(0,i.kt)("h2",{id:"operators"},(0,i.kt)("a",{parentName:"h2",href:"grammar#invocation"},"Operators")),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Operators")," are built-in commands that hvae no side-effects and special invocation syntax."),(0,i.kt)("p",null,"Each operator has an assigned ",(0,i.kt)("em",{parentName:"p"},"precedence")," ranking. This will be elaborated on as soon as some issues get ironed out."),(0,i.kt)("h3",{id:"unary-operators"},"Unary operators"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Unary operators")," require one operand."),(0,i.kt)("h4",{id:"unary-prefix-operators"},(0,i.kt)("a",{parentName:"h4",href:"grammar#invocation"},"Unary prefix operators")),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Unary prefix operators")," are positioned before their operand."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Syntax"),(0,i.kt)("th",{parentName:"tr",align:null},"Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Result"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"not")),(0,i.kt)("td",{parentName:"tr",align:null},"Unary NOT"),(0,i.kt)("td",{parentName:"tr",align:null},"The negation of the operand coerced to a ",(0,i.kt)("inlineCode",{parentName:"td"},"boolean"),".")))),(0,i.kt)("h3",{id:"binary-operators"},"Binary operators"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Binary operators")," require two operands."),(0,i.kt)("h4",{id:"binary-infix-operators"},(0,i.kt)("a",{parentName:"h4",href:"grammar#invocation"},"Binary infix operators")),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Binary infix operators")," are positioned in-between their operands."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Syntax"),(0,i.kt)("th",{parentName:"tr",align:null},"Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Result"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"or")),(0,i.kt)("td",{parentName:"tr",align:null},"OR"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://mathworld.wolfram.com/OR.html"},"OR")," or ",(0,i.kt)("a",{parentName:"td",href:"https://en.wikipedia.org/wiki/Logical_disjunction"},"disjunction")," of the operands coerced to ",(0,i.kt)("inlineCode",{parentName:"td"},"boolean"),"s.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"xor")),(0,i.kt)("td",{parentName:"tr",align:null},"XOR"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://mathworld.wolfram.com/XOR.html"},"XOR")," or ",(0,i.kt)("a",{parentName:"td",href:"https://en.wikipedia.org/wiki/XOR_gate"},"exclusive disjunction")," of the operands coerced to ",(0,i.kt)("inlineCode",{parentName:"td"},"boolean"),"s.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"and")),(0,i.kt)("td",{parentName:"tr",align:null},"AND"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://mathworld.wolfram.com/AND.html"},"AND")," or ",(0,i.kt)("a",{parentName:"td",href:"https://en.wikipedia.org/wiki/Logical_conjunction"},"conjunction")," of the operands coerced to ",(0,i.kt)("inlineCode",{parentName:"td"},"boolean"),"s.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"is a"),(0,i.kt)("br",null),(0,i.kt)("inlineCode",{parentName:"td"},"is an")),(0,i.kt)("td",{parentName:"tr",align:null},"Typecheck"),(0,i.kt)("td",{parentName:"tr",align:null},"Whether the first operand is of the type described by the second operand.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"is not a"),(0,i.kt)("br",null),(0,i.kt)("inlineCode",{parentName:"td"},"is not an"),(0,i.kt)("br",null),(0,i.kt)("inlineCode",{parentName:"td"},"isn't a"),(0,i.kt)("br",null),(0,i.kt)("inlineCode",{parentName:"td"},"isn\u2019t a"),(0,i.kt)("br",null),(0,i.kt)("inlineCode",{parentName:"td"},"isn't an"),(0,i.kt)("br",null),(0,i.kt)("inlineCode",{parentName:"td"},"isn\u2019t an")),(0,i.kt)("td",{parentName:"tr",align:null},"Negated typecheck"),(0,i.kt)("td",{parentName:"tr",align:null},"Whether the first operand is ",(0,i.kt)("em",{parentName:"td"},"not")," of the type described by the second operand. ",(0,i.kt)("inlineCode",{parentName:"td"},"x is not a y")," = ",(0,i.kt)("inlineCode",{parentName:"td"},"not (x is a y)"),".")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"equals"),(0,i.kt)("br",null),(0,i.kt)("inlineCode",{parentName:"td"},"[is] equal to"),(0,i.kt)("br",null),(0,i.kt)("inlineCode",{parentName:"td"},"equals to"),(0,i.kt)("br",null),(0,i.kt)("inlineCode",{parentName:"td"},"is"),(0,i.kt)("br",null),(0,i.kt)("inlineCode",{parentName:"td"},"="),(0,i.kt)("br",null),(0,i.kt)("inlineCode",{parentName:"td"},"==")),(0,i.kt)("td",{parentName:"tr",align:null},"Equality check"),(0,i.kt)("td",{parentName:"tr",align:null},"Whether the first operand is considered equal to the second operand.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"[is] not equal to"),(0,i.kt)("br",null),(0,i.kt)("inlineCode",{parentName:"td"},"isn't equal to"),(0,i.kt)("br",null),(0,i.kt)("inlineCode",{parentName:"td"},"isn\u2019t equal to"),(0,i.kt)("br",null),(0,i.kt)("inlineCode",{parentName:"td"},"[is] unequal to"),(0,i.kt)("br",null),(0,i.kt)("inlineCode",{parentName:"td"},"is not"),(0,i.kt)("br",null),(0,i.kt)("inlineCode",{parentName:"td"},"isn't"),(0,i.kt)("br",null),(0,i.kt)("inlineCode",{parentName:"td"},"isn\u2019t"),(0,i.kt)("br",null),(0,i.kt)("inlineCode",{parentName:"td"},"not ="),(0,i.kt)("br",null),(0,i.kt)("inlineCode",{parentName:"td"},"!="),(0,i.kt)("br",null),(0,i.kt)("inlineCode",{parentName:"td"},"\u2260")),(0,i.kt)("td",{parentName:"tr",align:null},"Inequality check",(0,i.kt)("br",null),"Negated equality check"),(0,i.kt)("td",{parentName:"tr",align:null},"Whether the first operand is ",(0,i.kt)("em",{parentName:"td"},"not")," considered equal to the second operand. ",(0,i.kt)("inlineCode",{parentName:"td"},"x is not equal to y")," = ",(0,i.kt)("inlineCode",{parentName:"td"},"not (x is equal to y)"),".")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"[is] less than"),(0,i.kt)("br",null),(0,i.kt)("inlineCode",{parentName:"td"},"<")),(0,i.kt)("td",{parentName:"tr",align:null},"Less-than check"),(0,i.kt)("td",{parentName:"tr",align:null},"Whether the first operand is ordered before the second operand.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"[is] less than [or] equal to"),(0,i.kt)("br",null),(0,i.kt)("inlineCode",{parentName:"td"},"[is] less than or equals"),(0,i.kt)("br",null),(0,i.kt)("inlineCode",{parentName:"td"},"<="),(0,i.kt)("br",null),(0,i.kt)("inlineCode",{parentName:"td"},"\u2264")),(0,i.kt)("td",{parentName:"tr",align:null},"Less-than-equal check"),(0,i.kt)("td",{parentName:"tr",align:null},"Whether the first operand is ordered before or the same as the second operand.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"[is] greater than"),(0,i.kt)("br",null),(0,i.kt)("inlineCode",{parentName:"td"},">")),(0,i.kt)("td",{parentName:"tr",align:null},"Greater-than check"),(0,i.kt)("td",{parentName:"tr",align:null},"Whether the first operand is ordered after the second operand.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"[is] greater than [or] equal to"),(0,i.kt)("br",null),(0,i.kt)("inlineCode",{parentName:"td"},"[is] greater than or equals"),(0,i.kt)("br",null),(0,i.kt)("inlineCode",{parentName:"td"},">="),(0,i.kt)("br",null),(0,i.kt)("inlineCode",{parentName:"td"},"\u2265")),(0,i.kt)("td",{parentName:"tr",align:null},"Greater-than-equal check"),(0,i.kt)("td",{parentName:"tr",align:null},"Whether the first operand is ordered after or the same as the second operand.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"starts with"),(0,i.kt)("br",null),(0,i.kt)("inlineCode",{parentName:"td"},"begins with")),(0,i.kt)("td",{parentName:"tr",align:null},"Starts-with check"),(0,i.kt)("td",{parentName:"tr",align:null},"Whether the sequential contents of first operand begin with the second or its contents.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"ends with")),(0,i.kt)("td",{parentName:"tr",align:null},"Ends-with check"),(0,i.kt)("td",{parentName:"tr",align:null},"Whether the sequential contents of first operand end with the second or its contents.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"contains"),(0,i.kt)("br",null),(0,i.kt)("inlineCode",{parentName:"td"},"has")),(0,i.kt)("td",{parentName:"tr",align:null},"Containment check"),(0,i.kt)("td",{parentName:"tr",align:null},"Whether the second operand or its contents are contained by the first operand.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"does not contain"),(0,i.kt)("br",null),(0,i.kt)("inlineCode",{parentName:"td"},"doesn't contain"),(0,i.kt)("br",null),(0,i.kt)("inlineCode",{parentName:"td"},"doesn\u2019t contain"),(0,i.kt)("br",null),(0,i.kt)("inlineCode",{parentName:"td"},"does not have"),(0,i.kt)("br",null),(0,i.kt)("inlineCode",{parentName:"td"},"doesn't have"),(0,i.kt)("br",null),(0,i.kt)("inlineCode",{parentName:"td"},"doesn\u2019t have")),(0,i.kt)("td",{parentName:"tr",align:null},"Non-containment check",(0,i.kt)("br",null),"Negated containment check"),(0,i.kt)("td",{parentName:"tr",align:null},"Whether the second operand or its contents are ",(0,i.kt)("em",{parentName:"td"},"not")," contained by the first operand. ",(0,i.kt)("inlineCode",{parentName:"td"},"x does not contain y")," = ",(0,i.kt)("inlineCode",{parentName:"td"},"not (x contains y)"),".")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"is in"),(0,i.kt)("br",null),(0,i.kt)("inlineCode",{parentName:"td"},"is contained by")),(0,i.kt)("td",{parentName:"tr",align:null},"Contained-by check",(0,i.kt)("br",null),"Converse containment check"),(0,i.kt)("td",{parentName:"tr",align:null},"Whether the first operand or its contents are contained by the second operand. ",(0,i.kt)("inlineCode",{parentName:"td"},"x is in y")," = ",(0,i.kt)("inlineCode",{parentName:"td"},"y contains x"),".")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"is not in"),(0,i.kt)("br",null),(0,i.kt)("inlineCode",{parentName:"td"},"isn't in"),(0,i.kt)("br",null),(0,i.kt)("inlineCode",{parentName:"td"},"isn\u2019t in"),(0,i.kt)("br",null),(0,i.kt)("inlineCode",{parentName:"td"},"is not contained by"),(0,i.kt)("br",null),(0,i.kt)("inlineCode",{parentName:"td"},"isn't contained by"),(0,i.kt)("br",null),(0,i.kt)("inlineCode",{parentName:"td"},"isn\u2019t contained by")),(0,i.kt)("td",{parentName:"tr",align:null},"Not-contained-by check",(0,i.kt)("br",null),"Converse non-containment check"),(0,i.kt)("td",{parentName:"tr",align:null},"Whether the first operand or its contents are ",(0,i.kt)("em",{parentName:"td"},"not")," contained by the second operand. ",(0,i.kt)("inlineCode",{parentName:"td"},"x is not in y")," = ",(0,i.kt)("inlineCode",{parentName:"td"},"not (x is in y)"),".")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"&")),(0,i.kt)("td",{parentName:"tr",align:null},"Concatenate"),(0,i.kt)("td",{parentName:"tr",align:null},"The contents of the first operand and the contents of the second operand joined together.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"+")),(0,i.kt)("td",{parentName:"tr",align:null},"Add"),(0,i.kt)("td",{parentName:"tr",align:null},"The sum of the first and second operands.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"-"),(0,i.kt)("br",null),(0,i.kt)("inlineCode",{parentName:"td"},"\u2212")),(0,i.kt)("td",{parentName:"tr",align:null},"Subtract"),(0,i.kt)("td",{parentName:"tr",align:null},"The difference between the first and second operands.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"*"),(0,i.kt)("br",null),(0,i.kt)("inlineCode",{parentName:"td"},"\xd7")),(0,i.kt)("td",{parentName:"tr",align:null},"Multiply"),(0,i.kt)("td",{parentName:"tr",align:null},"The product of the first and second operands.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"/"),(0,i.kt)("br",null),(0,i.kt)("inlineCode",{parentName:"td"},"\xf7")),(0,i.kt)("td",{parentName:"tr",align:null},"Divide"),(0,i.kt)("td",{parentName:"tr",align:null},"The quotient of the first and second operands.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"as")),(0,i.kt)("td",{parentName:"tr",align:null},"Coerce"),(0,i.kt)("td",{parentName:"tr",align:null},"The first operand coerced to the type described by the second operand.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500"),(0,i.kt)("td",{parentName:"tr",align:null},"\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500"),(0,i.kt)("td",{parentName:"tr",align:null})))))}s.isMDXComponent=!0}}]);