(self.webpackChunk=self.webpackChunk||[]).push([[309],{3905:(e,t,r)=>{"use strict";r.d(t,{Zo:()=>c,kt:()=>f});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=p(r),f=a,m=d["".concat(s,".").concat(f)]||d[f]||u[f]||o;return r?n.createElement(m,l(l({ref:t},c),{},{components:r})):n.createElement(m,l({ref:t},c))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,l=new Array(o);l[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var p=2;p<o;p++)l[p]=r[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},3351:(e,t,r)=>{"use strict";r.r(t),r.d(t,{frontMatter:()=>i,metadata:()=>s,toc:()=>p,default:()=>u});var n=r(2122),a=r(9756),o=(r(7294),r(3905)),l=["components"],i={title:"1-3: Data Flow",sidebar_label:"Part 3: Data Flow"},s={unversionedId:"ref/data-flow",id:"ref/data-flow",isDocsHomePage:!1,title:"1-3: Data Flow",description:"As any computer program, BushelScript scripts need to shunt data around to get things done.",source:"@site/docs/ref/data-flow.md",sourceDirName:"ref",slug:"/ref/data-flow",permalink:"/help/docs/ref/data-flow",version:"current",lastUpdatedBy:"Ian Gregory",lastUpdatedAt:1623393694,formattedLastUpdatedAt:"6/11/2021",sidebar_label:"Part 3: Data Flow",frontMatter:{title:"1-3: Data Flow",sidebar_label:"Part 3: Data Flow"},sidebar:"ref",previous:{title:"1-2: Basic Syntax",permalink:"/help/docs/ref/basic-syntax"},next:{title:"1-4: Object Types",permalink:"/help/docs/ref/object-types"}},p=[{value:"Anonymous",id:"anonymous",children:[]},{value:"Variables",id:"variables",children:[]}],c={toc:p};function u(e){var t=e.components,r=(0,a.Z)(e,l);return(0,o.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"As any computer program, BushelScript scripts need to shunt data around to get things done."),(0,o.kt)("p",null,"See also: ",(0,o.kt)("a",{parentName:"p",href:"../tutorial/data-flow"},"Quick Tutorial"),"."),(0,o.kt)("h2",{id:"anonymous"},"Anonymous"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"that")," keyword refers to the result of the last sequenced expression (i.e., whatever was discarded at the end of the previous line). This is called ",(0,o.kt)("em",{parentName:"p"},"anonymous")," data flow because there is no naming involved. It is somewhat analogous to shell script pipes (",(0,o.kt)("inlineCode",{parentName:"p"},"|"),") or the implicit data flow between actions in Automator or Siri Shortcuts."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"that")," only lacks meaning at the beginning of a ",(0,o.kt)("a",{parentName:"p",href:"functions"},"function"),", where it evaluates to ",(0,o.kt)("a",{parentName:"p",href:"basic-syntax#null-the-absence-of-a-value"},(0,o.kt)("inlineCode",{parentName:"a"},"null"))," because there is no previous expression. Since all language structures are expressions, they always result in a value, which may be referred to by ",(0,o.kt)("inlineCode",{parentName:"p"},"that")," once discarded."),(0,o.kt)("p",null,"Anonymous data flow is encouraged over the use of variables whenever reasonable. But don't feel restricted to it."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Syntax"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"<that> :: that\n")),(0,o.kt)("h2",{id:"variables"},"Variables"),(0,o.kt)("p",null,"Variables are ",(0,o.kt)("a",{parentName:"p",href:"terms"},"terms")," defined using a ",(0,o.kt)("inlineCode",{parentName:"p"},"let")," expression. As all terms, they can shadow other terms, and they may consist of multiple words."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Syntax"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"<let> :: let <term-name> [ be <initial-value> ]\n\n<initial-value> :: <expression>\n")))}u.isMDXComponent=!0}}]);