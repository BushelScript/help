(self.webpackChunk=self.webpackChunk||[]).push([[47],{3905:(e,t,a)=>{"use strict";a.d(t,{Zo:()=>u,kt:()=>m});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},u=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=p(a),m=r,f=d["".concat(s,".").concat(m)]||d[m]||c[m]||i;return a?n.createElement(f,o(o({ref:t},u),{},{components:a})):n.createElement(f,o({ref:t},u))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},2677:(e,t,a)=>{"use strict";a.r(t),a.d(t,{frontMatter:()=>l,metadata:()=>s,toc:()=>p,default:()=>c});var n=a(2122),r=a(9756),i=(a(7294),a(3905)),o=["components"],l={title:"1-3: Data Flow",sidebar_label:"Step 3: Data Flow"},s={unversionedId:"tutorial/data-flow",id:"tutorial/data-flow",isDocsHomePage:!1,title:"1-3: Data Flow",description:"As any computer program, BushelScript scripts need to shunt data around to get things done. The two primary ways to do this are anonymous data flow and variables.",source:"@site/docs/tutorial/data-flow.md",sourceDirName:"tutorial",slug:"/tutorial/data-flow",permalink:"/help/docs/tutorial/data-flow",version:"current",lastUpdatedBy:"Ian Gregory",lastUpdatedAt:1626226251,formattedLastUpdatedAt:"7/13/2021",sidebar_label:"Step 3: Data Flow",frontMatter:{title:"1-3: Data Flow",sidebar_label:"Step 3: Data Flow"},sidebar:"tutorial",previous:{title:"1-2: Basic Syntax",permalink:"/help/docs/tutorial/basic-syntax"},next:{title:"1-4: Object Types",permalink:"/help/docs/tutorial/object-types"}},p=[{value:"Anonymous data flow",id:"anonymous-data-flow",children:[]},{value:"Variables",id:"variables",children:[]}],u={toc:p};function c(e){var t=e.components,a=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"As any computer program, BushelScript scripts need to shunt data around to get things done. The two primary ways to do this are anonymous data flow and variables."),(0,i.kt)("p",null,"See also: ",(0,i.kt)("a",{parentName:"p",href:"/docs/ref/data-flow"},"Language Reference"),"."),(0,i.kt)("h2",{id:"anonymous-data-flow"},"Anonymous data flow"),(0,i.kt)("p",null,'"Anonymous" data flow is passing values around without giving them names. This is aided by the ',(0,i.kt)("inlineCode",{parentName:"p"},"that")," keyword, which refers to the result of the last sequenced expression, usually whatever was discarded at the end of the previous line."),(0,i.kt)("p",null,"We can perform a numeric calculation across multiple lines, without assigning any variables:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"-- Item price\n14.99   --\x3e 14.99\nthat    --\x3e 14.99\n-- Quantity\n4 * that  --\x3e 59.96\n-- Plus tax\nthat + (that * 13 / 100) --\x3e = 59.96 + (59.96 * 13/100) = 67.7548\n")),(0,i.kt)("p",null,"We can also check a condition without losing what we're working with (we'll cover conditional expressions more in Section 5):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'join {"long", "long", "list"} by "-" --\x3e "long-long-list"\nif (length of that) = 14\n  that --\x3e "long-long-list"\nend\n')),(0,i.kt)("p",null,"This style is encouraged whenever reasonable, but don't feel restricted to it."),(0,i.kt)("p",null,"Take note that everything you write in BushelScript is an expression that yields a result, so ",(0,i.kt)("inlineCode",{parentName:"p"},"that")," almost always has a meaningful value. (The only exception is the first expression of a program or ",(0,i.kt)("a",{parentName:"p",href:"function"},"function"),", where ",(0,i.kt)("inlineCode",{parentName:"p"},"that")," is ",(0,i.kt)("a",{parentName:"p",href:"basic-syntax#unspecified-the-incidental-absence-of-a-value"},(0,i.kt)("inlineCode",{parentName:"a"},"unspecified")),".)"),(0,i.kt)("h2",{id:"variables"},"Variables"),(0,i.kt)("p",null,'If you are used to AppleScript, take note: In BushelScript, there are no green-lettered "user identifiers". Instead, all names, including variables, are ',(0,i.kt)("a",{parentName:"p",href:"terms"},"terms")," defined in a ",(0,i.kt)("a",{parentName:"p",href:"dictionaries"},"dictionary"),"."),(0,i.kt)("p",null,"Variables can be defined using a ",(0,i.kt)("inlineCode",{parentName:"p"},"let")," expression. This defines a variable named ",(0,i.kt)("inlineCode",{parentName:"p"},"logic"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"let logic\n")),(0,i.kt)("p",null,"This defines a variable named ",(0,i.kt)("inlineCode",{parentName:"p"},"num")," and assigns it a value of ",(0,i.kt)("inlineCode",{parentName:"p"},"42"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"let num be 42\n")),(0,i.kt)("p",null,"Like most other dynamic languages, variables themselves are not assigned a specific data type. i.e., BushelScript variables are more like variables in Python than in Java."),(0,i.kt)("p",null,"Variables can shadow (hide) other terms:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'string --\x3e string type\nlet string be "example string"\nstring --\x3e "example string"\n')),(0,i.kt)("p",null,"And like all terms, variables can be composed of multiple words:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"let my favorite number be 3.141592654\n")),(0,i.kt)("p",null,"Shadowing and naming rules will be covered in detail in ",(0,i.kt)("a",{parentName:"p",href:"terms"},"terms"),"."))}c.isMDXComponent=!0}}]);